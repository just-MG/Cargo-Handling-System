#[derive(Clone, Copy)]
enum State {
    Ready,
    Detecting,
    Positioning,
    Analyzing,
    Discarding,
    Sorting,
    Error,
    Paused,
}


enum Event {
    PowerOn,
    DiscDetected,
    DiscPositioned,
    DiscAnalyzed { needed: bool },
    Discarded,
    Sorted,
    OperationError,
    Reset,
    Pause,
    Resume,
}

fn next_state(current_state: State, event: Event) -> State {
    use State::*;
    use Event::*;

    match (current_state, event) {
        (Ready, PowerOn) | (Ready, Resume) => Detecting,
        (Detecting, DiscDetected) => Positioning,
        (Positioning, DiscPositioned) => Analyzing,
        (Analyzing, DiscAnalyzed { needed }) if needed => Sorting,
        (Analyzing, DiscAnalyzed { needed: false }) => Discarding,
        (Discarding, Discarded) | (Sorting, Sorted) => Ready,
        (_, OperationError) | (_, Pause) => Error,
        (Error, Reset) => Ready,
        _ => current_state,
    }
}
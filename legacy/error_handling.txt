match machine.shared_state.error {
                    31 => {
                        // let _ = error_lcd::display_error(31);
                        // wait for the press of a button to continue
                        // TODO: implement button press
                        // go to the default state, after the issue has been fixed (button pressed)
                        // let _ = error_lcd::display_clear();
                        std::thread::sleep(std::time::Duration::from_millis(10000));
                        // let _ = error_lcd::display_clear();
                        let event = Event::Restart;
                        machine.transition(event);
                    }
                    21 => {
                        // let _ = error_lcd::display_error(21);
                        // wait for the press of a button to continue
                        // TODO: implement button press
                        // go to the default state, after the issue has been fixed (button pressed)
                        // let _ = error_lcd::display_clear();
                        std::thread::sleep(std::time::Duration::from_millis(10000));
                        let event = Event::Restart;
                        machine.transition(event);
                    }
                    _ => {
                        error!("Unknown error occurred");
                        println!("Unknown error occurred");
                        let to_continue = input::continue_input();
                        if to_continue {
                            let event = Event::Restart;
                            machine.transition(event);
                        } else {
                            std::process::exit(1);
                        }
                    }
                }
                // use Event::ErrorCallBack to transition back to the previous state
                let event = Event::ErrorCallBack;
                machine.transition(event);